#!/bin/bash
#
# https://github.com/Aniverse/inexistence
# Author: Aniverse
#
# 2018.10.29
# 1.0.2
# wget -qO de https://github.com/Aniverse/inexistence/raw/master/00.Installation/install/install_libtorrent_rasterbar
# bash de -v 1.3.9        bash de -m alt -b develop

OutputLOG=/etc/inexistence/01.Log/install_deluge.txt # /dev/null
SCLocation=/etc/inexistence/01.Log/SourceCodes
LOCKLocation=/etc/inexistence/01.Log/Lock

# Colors
black=$(tput setaf 0); red=$(tput setaf 1); green=$(tput setaf 2); yellow=$(tput setaf 3); blue=$(tput setaf 4); magenta=$(tput setaf 5); cyan=$(tput setaf 6); white=$(tput setaf 7);
on_red=$(tput setab 1); on_green=$(tput setab 2); on_yellow=$(tput setab 3); on_blue=$(tput setab 4); on_magenta=$(tput setab 5); on_cyan=$(tput setab 6); on_white=$(tput setab 7); bold=$(tput bold);
dim=$(tput dim); underline=$(tput smul); reset_underline=$(tput rmul); standout=$(tput smso); reset_standout=$(tput rmso); normal=$(tput sgr0); alert=${white}${on_red}; title=${standout};
baihuangse=${white}${on_yellow}; bailanse=${white}${on_blue}; bailvse=${white}${on_green}; baiqingse=${white}${on_cyan}; baihongse=${white}${on_red}; baizise=${white}${on_magenta};
heibaise=${black}${on_white}; heihuangse=${on_yellow}${black}; jiacu=${normal}${bold}; shanshuo=$(tput blink); wuguangbiao=$(tput civis); guangbiao=$(tput cnorm)
CW="${bold}${baihongse} ERROR ${jiacu}";ZY="${baihongse}${bold} ATTENTION ${jiacu}";JG="${baihongse}${bold} WARNING ${jiacu}"

# Sustem check
DISTRO=`  awk -F'[= "]' '/PRETTY_NAME/{print $3}' /etc/os-release  `
CODENAME=`  cat /etc/os-release | grep VERSION= | tr '[A-Z]' '[a-z]' | sed 's/\"\|(\|)\|[0-9.,]\|version\|lts//g' | awk '{print $2}'  `

# Get options
OPTS=$(getopt -n "$0" -o m:v:b: --long "install-mode:,version:,branch:" -- "$@")



eval set -- "$OPTS"

while true; do
  case "$1" in
    -m | --install-mode ) mode="$2"     ; shift ; shift ;;
    -v | --version      ) version="$2"  ; shift ; shift ;;
    -b | --branch       ) branch="$2"   ; shift ; shift ;;
     * ) break ;;
  esac
done

case $mode in
    apt     ) sleep 0  ;;
    ppa     ) sleep 0  ;;
    source  ) sleep 0  ;;
    alt     ) sleep 0  ;;
    ""   | *) echo -e "\n${CW} Install mode must be specified as apt, ppa, source or alt${normal}\n"   ;;
esac

DeSource="http://download.deluge-torrent.org/source"

# Check if input version is available
AvailableVersion=$(  wget -qO- $DeSource | grep -o "deluge-[0-9]\{1,2\}\.[0-9]\{1,2\}\.[0-9]\{1,2\}\.tar.gz" | sort -uV | grep -o "[0-9]\{1,2\}\.[0-9]\{1,2\}\.[0-9]\{1,2\}"  )
[[ ! -z $version ]] && [[ ! $( echo $AvailableVersion | grep $version ) ]] && { echo -e "\n${CW} The version you input is not available!\n" ; exit 1 ; }

# Check if input branch exists
[[ ! -z $branch ]] && [[ ! $( wget -qO- "https://github.com/deluge-torrent/deluge" | grep data-name | cut -d '"' -f2 | grep -P "$branch\b" ) ]] && { echo -e "\n${CW} No such branch!\n" ; exit 1 ; }

[[ ! -z $version ]] && source_type=release
[[ ! -z $branch  ]] && source_type=git     && version=$branch

# Random Number
# [[ $mode =~ (source|alt) ]] && RN=$(shuf -i 1-999 -n1)





# Install build dependencies for deluge 
function _install_de_dependencies() {

echo -ne "Install deluge build dependencies ... " | tee -a $OutputLOG

# Install Dependencies without python-libtorrent (libtorrent-rasterbar should have been built before)
apt-get install -y python python-twisted python-openssl python-setuptools intltool python-xdg python-chardet geoip-database python-notify python-pygame python-glade2 librsvg2-common xdg-utils python-mako >> $OutputLOG 2>&1 && \
echo "${green}${bold}DONE${normal}" || echo "${red}${bold}FAILED${normal}"

touch $LOCKLocation/deluge.dependencies.lock ; }





# Fetch source files (release)
function _get_sources_releases() {

wget $DeSource/deluge-$version.tar.gz         >> $OutputLOG 2>&1
tar xf deluge-$version.tar.gz                 >> $OutputLOG 2>&1
rm -f deluge-$version.tar.gz                  >> $OutputLOG 2>&1
cd deluge-$version                            >> $OutputLOG 2>&1

touch $LOCKLocation/deluge.dependencies.lock ; }





# Fetch source files (release)
function _get_sources_releases() {
wget $DeSource/deluge-$version.tar.gz         >> $OutputLOG 2>&1
tar xf deluge-$version.tar.gz                 >> $OutputLOG 2>&1
rm -f deluge-$version.tar.gz                  >> $OutputLOG 2>&1
cd deluge-$version                            >> $OutputLOG 2>&1 ; }





# Fetch source files (git)
function _get_sources_git() {
git clone https://github.com/deluge-torrent/deluge deluge-$version  >> $OutputLOG 2>&1
cd deluge-$version   >> $OutputLOG 2>&1
git checkout $branch >> $OutputLOG 2>&1 ; }





# Install from source code
function _install_de_source() {

[[ ! -f $LOCKLocation/deluge.dependencies.lock ]] && _install_de_dependencies

echo -e "Install deluge ${bold}${cyan}$version${normal} from source codes ... " | tee -a $OutputLOG

if   [[ source_type == release ]]; then
    _get_sources_releases
elif [[ source_type ==   git   ]]; then
    _get_sources_git
fi

python setup.py build                         >> $OutputLOG 2>&1
python setup.py install --install-layout=deb  >> $OutputLOG 2>&1 && \
echo "${green}${bold}DONE${normal}" || echo "${red}${bold}FAILED${normal}"

rm -rf deluge-$version                        >> $OutputLOG 2>&1

touch $LOCKLocation/deluge.lock
touch $LOCKLocation/deluge.source.$version.lock ; }





# Install another version of deluge (e.g. 1.3.9 for KeepFRDS)
function _install_de_alt() {

[[ ! -f $LOCKLocation/deluge.dependencies.lock ]] && _install_de_dependencies

echo -e "Install another deluge ${bold}${cyan}$version${normal} from source codes ... " | tee -a $OutputLOG

if   [[ source_type == release ]]; then
    _get_sources_releases
elif [[ source_type ==   git   ]]; then
    _get_sources_git
fi

python setup.py install --user                >> $OutputLOG 2>&1 && \
echo "${green}${bold}DONE${normal}" || echo "${red}${bold}FAILED${normal}"

for de in deluge deluged deluge-web deluge-console deluge-gtk ; do
    mv -f ~/.local/bin/${de} /usr/bin/${de}2  >> $OutputLOG 2>&1
done

rm -rf deluge-$version                        >> $OutputLOG 2>&1

touch $LOCKLocation/deluge.alt.lock
touch $LOCKLocation/deluge.alt.$version.lock ; }





# Install from PPA
function _install_de_ppa() {

latest_stable=1.3.15
latest_stable=` wget -qO- https://dev.deluge-torrent.org/wiki/ReleaseNotes | grep wiki/ReleaseNotes | grep -Eo "[12]\.[0-9.]+" | sed 's/">/ /' | awk '{print $1}' | head -n1 `

echo -ne "Install deluge ${bold}${cyan}$latest_stable${normal} from stable ppa ... " | tee -a $OutputLOG

if   [[ $DISTRO == Debian ]]; then

    echo 'deb http://ppa.launchpad.net/deluge-team/ppa/ubuntu trusty main'        >> /etc/apt/sources.list
    apt-get update                                                                >> $OutputLOG 2>&1
    apt-get install -t trusty deluge deluged deluge-web deluge-console deluge-gtk >> $OutputLOG 2>&1 && && \
    echo "${green}${bold}DONE${normal}" || echo "${red}${bold}FAILED${normal}"

elif [[ $DISTRO == Ubuntu ]]; then

    add-apt-repository -y ppa:deluge-team/ppa         >> $OutputLOG 2>&1
    apt-get update                                    >> $OutputLOG 2>&1
  # apt-get install python-libtorrent                 >> $OutputLOG 2>&1
  # apt-get install -y --allow-change-held-packages --allow-downgrades libtorrent-rasterbar8=1.0.11-1~xenial~ppa1.1 python-libtorrent=1.0.11-1~xenial~ppa1.1 >> $OutputLOG 2>&1
  # apt-mark hold python-libtorrent                   >> $OutputLOG 2>&1
  # apt-mark hold libtorrent-rasterbar8               >> $OutputLOG 2>&1
    apt-get install -t trusty deluge deluged deluge-web deluge-console deluge-gtk >> $OutputLOG 2>&1 && \
    echo "${green}${bold}DONE${normal}" || echo "${red}${bold}FAILED${normal}"

fi

touch $LOCKLocation/deluge.lock
touch $LOCKLocation/deluge.ppa.lock ; }





# Install from repository
function _install_de_apt() {

version=` apt-cache policy deluge | grep -B1 http | grep -Eo "[012]\.[0-9]+.[0-9]+" | head -n1 `
[[ -z $version ]] && {
[[ $CODENAME == bionic  ]] && version=1.3.15 ; [[ $CODENAME == xenial ]] && version=1.3.12 ; [[ $CODENAME == trusty ]] && version=1.3.6
[[ $CODENAME == stretch ]] && version=1.3.13 ; [[ $CODENAME == jessie ]] && version=1.3.10 ; }

echo -ne "Install deluge ${bold}${cyan}$version${normal} from repository ... " | tee -a $OutputLOG

apt-get install -y deluge deluged deluge-web deluge-console deluge-gtk >> $OutputLOG 2>&1 && \
echo "${green}${bold}DONE${normal}" || echo "${red}${bold}FAILED${normal}"

touch $LOCKLocation/deluge.lock
touch $LOCKLocation/deluge.apt.lock ; }





mkdir -p $SCLocation $LOCKLocation
cd       $SCLocation

cat>>$OutputLOG<<EOF



$(date "+%Y.%m.%d.%H.%M.%S")   $RN



EOF

case $mode in
    apt     ) _install_de_apt     ;;
    ppa     ) _install_de_ppa     ;;
    source  ) _install_de_source  ;;
    alt     ) _install_de_alt     ;;
esac

cd
